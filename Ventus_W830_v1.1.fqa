{"name":"Weerstation","type":"com.fibaro.deviceController","apiVersion":"1.3","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_521"},"sections":{"items":[{"components":[{"name":"labelTitle","style":{"weight":"1.2"},"text":"Ventus W830","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelStationType","style":{"weight":"1.2"},"text":"stationtype","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelModel","style":{"weight":"1.2"},"text":"model","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelDateUtc","style":{"weight":"1.2"},"text":"dateutc","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_521"}}},"uiView":[{"components":[{"name":"labelTitle","style":{"weight":"1.0"},"text":"Ventus W830","type":"label","visible":true}],"style":{"weight":"1.0"},"type":"horizontal"},{"components":[{"name":"labelStationType","style":{"weight":"1.0"},"text":"stationtype","type":"label","visible":true}],"style":{"weight":"1.0"},"type":"horizontal"},{"components":[{"name":"labelModel","style":{"weight":"1.0"},"text":"model","type":"label","visible":true}],"style":{"weight":"1.0"},"type":"horizontal"},{"components":[{"name":"labelDateUtc","style":{"weight":"1.0"},"text":"dateutc","type":"label","visible":true}],"style":{"weight":"1.0"},"type":"horizontal"}],"useUiView":true,"uiCallbacks":[],"quickAppVariables":[],"typeTemplateInitialized":true},"initialInterfaces":[],"files":[{"name":"main","isMain":true,"isOpen":true,"content":"----------------------------------------------------------------------------------\n-- Ventus W830 Weather Station\n-- Version 1.1 (May 2024) - Added WindGust childdevice, rounded numbers\n--   and fixed nil bug when value was not send by weatherstation.\n-- Version 1.0 (April 2022)\n-- Copyright (c)2022-2024 Joep Verhaeg <info@joepverhaeg.nl>\n\n-- Full documentation you can find at:\n-- https://docs.joepverhaeg.nl/ventus-w830/\n----------------------------------------------------------------------------------\n-- DESCRIPTION:\n-- This Quick App integrates with the Ventus W830 local API. It shows the \n-- weather station readings and uses the correct FIBARO device types.\n\n-- QUICK SETUP:\n-- 1. Configure a customized upload server in the WS View app under Device List,\n-- 2. Set the IPv4 to a Node-RED or PHP server that accepts the POST JSON payload,\n-- 3. Configure the Node-RED or PHP server to forward the payload to this\n--    Ventus W830 Quick App (an example is included in the documentation).\n----------------------------------------------------------------------------------\n__TAG = \"QAVENTUS\" .. plugin.mainDeviceId\n_VERSION = \"1.1\"\n\nlocal function getChildVariable(child, varName)\n    for _,v in ipairs(child.properties.quickAppVariables or {}) do\n        if (v.name == varName) then \n            return v.value\n        end\n    end\n    return \"\"\nend\n\nlocal function round(num, numDecimalPlaces)\n    local mult = 10^(numDecimalPlaces or 0)\n    return math.floor(num * mult + 0.5) / mult\nend\n\nclass 'Sensor'(QuickAppChild)\nfunction Sensor:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device)\nend\n\nfunction Sensor:updateValue(propertyName, weatherdata)\n    if propertyName == \"tempinf\" then\n        -- Convert temperature from Fahrenheit to Celcius\n        local tempinc = (tonumber(weatherdata['tempinf']) - 32) * 5 / 9\n        self:updateProperty(\"value\", round(tempinc, 2))\n    elseif propertyName == \"tempf\" then\n        local tempc = (tonumber(weatherdata['tempf']) - 32) * 5 / 9\n        self:updateProperty(\"value\", round(tempc, 2))\n    elseif propertyName == \"uv\" then\n        local uvi = tonumber(weatherdata['uv'])\n        if uvi == 0 then \n            uvalert = \"None\"\n        elseif uvi <= 2 then\n            uvalert = \"Very Low\"\n        elseif uvi <= 4 then\n            uvalert = \"Low\"\n        elseif uvi <= 6 then\n            uvalert = \"Moderate\"\n        elseif uvi <= 8 then\n            uvalert = \"High\"\n        elseif uvi >= 9 then\n            uvalert = \"Very High\"\n        end\n        self:updateProperty(\"value\", uvi)\n        self:updateProperty(\"log\", uvalert)\n    elseif propertyName == \"baromabsin\" then\n        -- Convert barometric pressure from inHg to hPa\n        local baromabsin = math.floor((tonumber(weatherdata['baromabsin'])/0.029529983071445)*100)/100\n        self:updateProperty(\"value\", round(baromabsin, 2))\n    elseif propertyName == \"windspeedmph\" then\n        local windspeedkmh = tonumber(weatherdata['windspeedmph'])*1.609344\n        self:updateProperty(\"value\", round(windspeedkmh, 2))\n    elseif propertyName == \"windgustmph\" then\n        local windgustmph = tonumber(weatherdata['windgustmph'])*1.609344\n        self:updateProperty(\"value\", round(windgustmph, 2))\n        local maxdailygust  = tonumber(weatherdata['maxdailygust'])*1.609344\n        self:updateProperty(\"log\", \"Max: \" .. round(maxdailygust, 2) .. \" km/u\")\n    elseif propertyName == \"dailyrainin\" then\n        local dailyrainin = tonumber(weatherdata['dailyrainin'])*25.4\n        local monthlyrainin  = math.floor((tonumber(weatherdata['monthlyrainin'])*25.4)*10)/10\n        self:updateProperty(\"value\", dailyrainin)\n        self:updateProperty(\"log\", \"Month: \" .. monthlyrainin .. \" mm\")\n    else\n        -- Parse the other properties\n        self:updateProperty(\"value\", tonumber(weatherdata[propertyName]))\n    end\nend\n\nfunction QuickApp:data(weatherdata)\n    self:updateView(\"labelStationType\", \"text\", weatherdata['stationtype'])\n    self:updateView(\"labelModel\", \"text\", weatherdata['model'])\n    self:updateView(\"labelDateUtc\", \"text\", weatherdata['dateutc'] .. \" UTC\")\n    self:updateProperty(\"log\", os.date('%d-%m %H:%M:%S'))\n    for id, child in pairs(self.childDevices) do\n        local propertyName = child:getVariable(\"propertyName\")\n        if weatherdata[propertyName] then\n            child:updateValue(propertyName, weatherdata)\n        end\n    end\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"Initialising Ventus W830 integration v\" .. _VERSION)\n\n    self.childsInitialized = true\n    if not api.get(\"/devices/\" .. self.id).enabled then\n        self:warning(\"The Ventus W830 weather station device is disabled!\")\n        return\n    end\n\n    local cdevs = api.get(\"/devices?parentId=\"..self.id) or {}\n    if #cdevs == 0 then\n        -- Child devices are not created yet, create them...\n        initChildData = {\n            {name=\"Indoor Temperature\", className=\"Sensor\", propertyName=\"tempinf\", type=\"com.fibaro.temperatureSensor\"},\n            {name=\"Indoor Humidity\", className=\"Sensor\", propertyName=\"humidityin\", type=\"com.fibaro.humiditySensor\"},\n            {name=\"Baromatric Pressure\", className=\"Sensor\", propertyName=\"baromabsin\", type=\"com.fibaro.multilevelSensor\", unit=\"hPa\"},\n            {name=\"Outdoor Temperature\", className=\"Sensor\", propertyName=\"tempf\", type=\"com.fibaro.temperatureSensor\"},\n            {name=\"Outdoor Humidity\", className=\"Sensor\", propertyName=\"humidity\", type=\"com.fibaro.humiditySensor\"},\n            {name=\"Wind Speed\", className=\"Sensor\", propertyName=\"windspeedmph\", type=\"com.fibaro.windSensor\", unit=\"km/h\"},\n            {name=\"Wind Gust\", className=\"Sensor\", propertyName=\"windgustmph\", type=\"com.fibaro.windSensor\", unit=\"km/h\"},\n            {name=\"Rain Fall\", className=\"Sensor\", propertyName=\"dailyrainin\", type=\"com.fibaro.rainSensor\", unit=\"mm\"},\n            {name=\"Light\", className=\"Sensor\", propertyName=\"solarradiation\", type=\"com.fibaro.multilevelSensor\", unit=\"w/m2\"},\n            {name=\"UV index\", className=\"Sensor\", propertyName=\"uv\", type=\"com.fibaro.multilevelSensor\", unit=\"UVI\"}\n        }\n        for _,c in ipairs(initChildData) do\n            local child = self:createChildDevice(\n                {\n                    name = c.name,\n                    type=c.type,\n                    initialProperties = {},\n                    initialInterfaces = {},\n                },\n                _G[c.className] -- Fetch class constructor from class name\n            )\n            child:setVariable(\"className\", c.className)  -- Save class name so we know when we load it next time.\n            child:setVariable(\"propertyName\", c.propertyName)\n            if (c.unit ~= nil) then\n                child:updateProperty(\"unit\", c.unit)\n            end\n            child.parent = self\n            self:debug(\"Child device \" .. child.name .. \" created with id: \", child.id)\n        end\n    else\n        -- Ok, we already have children, instantiate them with the correct class\n        -- This is more or less what self:initChildDevices does but this can handle \n        -- mapping different classes to the same type...\n        for _,child in ipairs(cdevs) do\n            local className = getChildVariable(child,\"className\") -- Fetch child class name\n            local childObject = _G[className](child) -- Create child object from the constructor name\n            self.childDevices[child.id]=childObject\n            childObject.parent = self -- Setup parent link to device controller\n        end\n    end\nend"}]}